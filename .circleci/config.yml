version: 2.1

orbs:
  gcp-gcr: circleci/gcp-gcr@0.16.3
  gcp-cloud-run: circleci/gcp-cloud-run@1.0.2

commands:
  install-aws-cli:
    steps:
      - run:
          name: Install AWS CLI
          command: |
            # Create a temporary directory to avoid conflicts with existing files
            mkdir -p /tmp/awscli-install
            cd /tmp/awscli-install
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
            cd -
            rm -rf /tmp/awscli-install
            echo 'export PATH=/usr/local/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
            aws --version
      - run:
          name: Configure AWS
          command: |
            source $BASH_ENV
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION

  install-gcloud:
    steps:
      - run:
          name: Install gcloud
          command: |
            export CLOUDSDK_CORE_DISABLE_PROMPTS=1
            export CLOUDSDK_INSTALL_DIR=$HOME
            curl -sSL https://sdk.cloud.google.com | bash
            source "$HOME/google-cloud-sdk/path.bash.inc"
            echo 'source "$HOME/google-cloud-sdk/path.bash.inc"' >> $BASH_ENV
            gcloud version
      - run:
          name: Authenticate GCP
          command: |
            source $BASH_ENV
            echo "$GCLOUD_SERVICE_KEY" > creds.json
            gcloud auth activate-service-account --key-file=creds.json
            gcloud config set project "$GOOGLE_PROJECT_ID"

parameters:
  deploy-aws:
    type: boolean
    default: true
  deploy-gcp:
    type: boolean
    default: true

jobs:
  test:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Test Docker build
          command: docker build -t multi-cloud-demo:test .

  build-and-push-aws:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - setup_remote_docker
      - install-aws-cli
      - run:
          name: Configure ECR authentication
          command: |
            source $BASH_ENV
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - run:
          name: Create ECR repository if it doesn't exist
          command: |
            source $BASH_ENV
            echo "Checking if ECR repository 'multi-cloud-demo' exists..."
            if ! aws ecr describe-repositories --repository-names multi-cloud-demo --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
              echo "Repository doesn't exist. Creating ECR repository..."
              aws ecr create-repository --repository-name multi-cloud-demo --region $AWS_DEFAULT_REGION
              echo "ECR repository 'multi-cloud-demo' created successfully!"
            else
              echo "ECR repository 'multi-cloud-demo' already exists."
            fi
      - run:
          name: Build and push Docker image to ECR
          command: |
            DEPLOYMENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            APP_VERSION=${CIRCLE_SHA1:0:7}
            ECR_REPO="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/multi-cloud-demo"

            echo "Building Docker image..."
            docker build \
              --build-arg DEPLOYMENT_TIME=$DEPLOYMENT_TIME \
              --build-arg APP_VERSION=$APP_VERSION \
              -t $ECR_REPO:latest \
              -t $ECR_REPO:${CIRCLE_SHA1} \
              .

            echo "Pushing Docker image..."
            docker push $ECR_REPO:latest
            docker push $ECR_REPO:${CIRCLE_SHA1}

  build-and-push-gcp:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - setup_remote_docker
      - install-gcloud
      - run:
          name: Configure Docker for GCR
          command: |
            source $BASH_ENV
            gcloud auth configure-docker gcr.io
      - gcp-gcr/build-image:
          image: multi-cloud-demo
          tag: "latest,${CIRCLE_SHA1}"
          dockerfile: Dockerfile
          registry-url: gcr.io
          extra_build_args: |
            --build-arg DEPLOYMENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --build-arg APP_VERSION=${CIRCLE_SHA1:0:7}
      - gcp-gcr/push-image:
          image: multi-cloud-demo
          tag: "latest,${CIRCLE_SHA1}"
          registry-url: gcr.io

  deploy-to-aws:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - install-aws-cli
      - run:
          name: Replace placeholders in task definition
          command: |
            sed -i "s/{AWS_ACCOUNT_ID}/$AWS_ACCOUNT_ID/g" aws/task-definition.json
            sed -i "s/{ECR_REPOSITORY_URI}/$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\/multi-cloud-demo/g" aws/task-definition.json
            sed -i "s/{AWS_REGION}/$AWS_DEFAULT_REGION/g" aws/task-definition.json
            sed -i "s/{CIRCLE_SHA1}/${CIRCLE_SHA1}/g" aws/task-definition.json
      - run:
          name: Ensure ECS cluster is active
          command: |
            echo "Checking ECS cluster 'multi-cloud-cluster' status..."

            # Check if cluster exists and get its status
            CLUSTER_STATUS=$(aws ecs describe-clusters --clusters multi-cloud-cluster --region $AWS_DEFAULT_REGION --query 'clusters[0].status' --output text 2>/dev/null || echo "NOTFOUND")

            echo "Current cluster status: $CLUSTER_STATUS"

            if [ "$CLUSTER_STATUS" = "NOTFOUND" ] || [ "$CLUSTER_STATUS" = "None" ]; then
              echo "Cluster doesn't exist. Creating ECS cluster..."
              aws ecs create-cluster --cluster-name multi-cloud-cluster --region $AWS_DEFAULT_REGION
              echo "ECS cluster 'multi-cloud-cluster' created successfully!"
            elif [ "$CLUSTER_STATUS" = "INACTIVE" ]; then
              echo "Cluster exists but is INACTIVE. Deleting and recreating..."
              aws ecs delete-cluster --cluster multi-cloud-cluster --region $AWS_DEFAULT_REGION
              echo "Waiting for cluster deletion to complete..."
              sleep 5
              echo "Creating new ECS cluster..."
              aws ecs create-cluster --cluster-name multi-cloud-cluster --region $AWS_DEFAULT_REGION
              echo "ECS cluster 'multi-cloud-cluster' recreated successfully!"
            elif [ "$CLUSTER_STATUS" = "ACTIVE" ]; then
              echo "ECS cluster 'multi-cloud-cluster' is already active."
            else
              echo "Unknown cluster status: $CLUSTER_STATUS. Attempting to recreate..."
              aws ecs delete-cluster --cluster multi-cloud-cluster --region $AWS_DEFAULT_REGION 2>/dev/null || true
              sleep 5
              aws ecs create-cluster --cluster-name multi-cloud-cluster --region $AWS_DEFAULT_REGION
              echo "ECS cluster 'multi-cloud-cluster' recreated successfully!"
            fi

            # Wait for cluster to be ready
            echo "Waiting for cluster to be fully active..."
            sleep 10
      - run:
          name: Create CloudWatch log group
          command: |
            source $BASH_ENV
            echo "Creating CloudWatch log group for ECS tasks..."
            # Check if log group exists
            if ! aws logs describe-log-groups \
              --log-group-name-prefix "/ecs/multi-cloud-demo" \
              --region $AWS_DEFAULT_REGION \
              --query 'logGroups[?logGroupName==`/ecs/multi-cloud-demo`]' \
              --output text | grep -q "/ecs/multi-cloud-demo"; then
              echo "Log group doesn't exist. Creating /ecs/multi-cloud-demo..."
              aws logs create-log-group \
                --log-group-name "/ecs/multi-cloud-demo" \
                --region $AWS_DEFAULT_REGION
              # Set retention policy (optional - 7 days to save costs)
              aws logs put-retention-policy \
                --log-group-name "/ecs/multi-cloud-demo" \
                --retention-in-days 7 \
                --region $AWS_DEFAULT_REGION
              echo "CloudWatch log group created successfully!"
            else
              echo "CloudWatch log group /ecs/multi-cloud-demo already exists."
            fi
      - run:
          name: Register task definition
          command: |
            source $BASH_ENV
            echo "Registering task definition..."
            aws ecs register-task-definition \
              --cli-input-json file://aws/task-definition.json \
              --region $AWS_DEFAULT_REGION
      - run:
          name: Create or update ECS service
          command: |
            source $BASH_ENV
            echo "Checking if ECS service exists and is active..."
            SERVICE_STATUS=$(aws ecs describe-services \
              --cluster multi-cloud-cluster \
              --services multi-cloud-demo-service \
              --region $AWS_DEFAULT_REGION \
              --query 'services[0].status' \
              --output text 2>/dev/null || echo "NOTFOUND")

            echo "Service status: $SERVICE_STATUS"

            if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
              echo "Service exists and is active, updating..."
              aws ecs update-service \
                --cluster multi-cloud-cluster \
                --service multi-cloud-demo-service \
                --task-definition multi-cloud-demo \
                --region $AWS_DEFAULT_REGION
            else
              echo "Service does not exist, creating..."
              # Get default VPC and subnet
              VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text --region $AWS_DEFAULT_REGION)
              SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0].SubnetId' --output text --region $AWS_DEFAULT_REGION)
              
              # Create or get security group
              SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=multi-cloud-demo-sg" --query 'SecurityGroups[0].GroupId' --output text --region $AWS_DEFAULT_REGION 2>/dev/null)
              if [ "$SG_ID" == "None" ] || [ -z "$SG_ID" ]; then
                echo "Creating security group..."
                SG_ID=$(aws ec2 create-security-group \
                  --group-name multi-cloud-demo-sg \
                  --description "Security group for multi-cloud demo" \
                  --vpc-id $VPC_ID \
                  --region $AWS_DEFAULT_REGION \
                  --query 'GroupId' --output text)
                
                # Allow HTTP traffic
                aws ec2 authorize-security-group-ingress \
                  --group-id $SG_ID \
                  --protocol tcp \
                  --port 3000 \
                  --cidr 0.0.0.0/0 \
                  --region $AWS_DEFAULT_REGION
              fi
              
              aws ecs create-service \
                --cluster multi-cloud-cluster \
                --service-name multi-cloud-demo-service \
                --task-definition multi-cloud-demo \
                --desired-count 1 \
                --launch-type FARGATE \
                --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
                --region $AWS_DEFAULT_REGION
            fi

  deploy-to-gcp:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - install-gcloud
      - run:
          name: Replace placeholders in service definition
          command: |
            sed -i "s/{GCP_PROJECT_ID}/$GOOGLE_PROJECT_ID/g" gcp/service.yaml
            sed -i "s/{GCP_REGION}/$GOOGLE_COMPUTE_REGION/g" gcp/service.yaml
            sed -i "s/:latest/:${CIRCLE_SHA1}/g" gcp/service.yaml
      - gcp-cloud-run/deploy:
          platform: managed
          image: gcr.io/$GOOGLE_PROJECT_ID/multi-cloud-demo:${CIRCLE_SHA1}
          service-name: multi-cloud-demo
          region: $GOOGLE_COMPUTE_REGION
          unauthenticated: true

  verify-deployments:
    docker:
      - image: cimg/node:18.20
    steps:
      - install-aws-cli
      - install-gcloud
      - run:
          name: Verify AWS ECS deployment
          command: |
            source $BASH_ENV
            echo "Verifying AWS ECS deployment..."

            # Check service status
            SERVICE_STATUS=$(aws ecs describe-services \
              --cluster multi-cloud-cluster \
              --services multi-cloud-demo-service \
              --region $AWS_DEFAULT_REGION \
              --query 'services[0].status' \
              --output text)

            echo "ECS Service Status: $SERVICE_STATUS"

            if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
              echo "AWS ECS service is active and running"
              echo "Access your application through the AWS Console:"
              echo "1. Go to ECS Console > Clusters > multi-cloud-cluster"
              echo "2. Click on the service > Tasks tab"
              echo "3. Click on the running task to find the public IP"
              echo "4. Access via http://[PUBLIC_IP]:3000"
            else
              echo "AWS ECS service verification failed"
              exit 1
            fi
      - run:
          name: Verify GCP Cloud Run deployment
          command: |
            source $BASH_ENV
            echo "Verifying GCP Cloud Run deployment..."

            # Check service status
            gcloud run services describe multi-cloud-demo \
              --region=$GOOGLE_COMPUTE_REGION \
              --format="value(status.conditions[0].status)" > /tmp/status.txt

            GCP_STATUS=$(cat /tmp/status.txt)
            echo "Cloud Run Service Status: $GCP_STATUS"

            if [ "$GCP_STATUS" = "True" ]; then
              echo "GCP Cloud Run service is ready and running"
              # Get service URL
              SERVICE_URL=$(gcloud run services describe multi-cloud-demo \
                --region=$GOOGLE_COMPUTE_REGION \
                --format="value(status.url)")
              echo "Service URL: $SERVICE_URL"
            else
              echo "GCP Cloud Run service verification failed"
              exit 1
            fi

workflows:
  # Always run tests
  test-only:
    when:
      and:
        - not: << pipeline.parameters.deploy-aws >>
        - not: << pipeline.parameters.deploy-gcp >>
    jobs:
      - test

  # AWS only deployment
  aws-deploy:
    when:
      and:
        - << pipeline.parameters.deploy-aws >>
        - not: << pipeline.parameters.deploy-gcp >>
    jobs:
      - test
      - build-and-push-aws:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy-to-aws:
          requires:
            - build-and-push-aws

  # GCP only deployment
  gcp-deploy:
    when:
      and:
        - << pipeline.parameters.deploy-gcp >>
        - not: << pipeline.parameters.deploy-aws >>
    jobs:
      - test
      - build-and-push-gcp:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy-to-gcp:
          requires:
            - build-and-push-gcp

  # Multi-cloud deployment with verification
  multi-cloud-deploy:
    when:
      and:
        - << pipeline.parameters.deploy-aws >>
        - << pipeline.parameters.deploy-gcp >>
    jobs:
      - test
      - build-and-push-aws:
          requires:
            - test
          filters:
            branches:
              only: main
      - build-and-push-gcp:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy-to-aws:
          requires:
            - build-and-push-aws
      - deploy-to-gcp:
          requires:
            - build-and-push-gcp
      - verify-deployments:
          requires:
            - deploy-to-aws
            - deploy-to-gcp
