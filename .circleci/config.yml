version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
  aws-ecr: circleci/aws-ecr@9.0.4
  aws-ecs: circleci/aws-ecs@4.0.0
  gcp-gcr: circleci/gcp-gcr@0.16.3
  gcp-cloud-run: circleci/gcp-cloud-run@1.0.2

parameters:
  deploy-aws:
    type: boolean
    default: true
  deploy-gcp:
    type: boolean
    default: true

jobs:
  test:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Test Docker build
          command: docker build -t multi-cloud-demo:test .

  build-and-push-aws:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - setup_remote_docker
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
                region: AWS_DEFAULT_REGION
          account_id: AWS_ACCOUNT_ID
          region: AWS_DEFAULT_REGION
          repo: multi-cloud-demo
          tag: "latest,${CIRCLE_SHA1}"
          dockerfile: Dockerfile
          extra_build_args: |
            --build-arg DEPLOYMENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --build-arg APP_VERSION=${CIRCLE_SHA1:0:7}

  build-and-push-gcp:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - setup_remote_docker
      - gcp-gcr/gcr-auth:
          gcloud-service-key: GCLOUD_SERVICE_KEY
          google-project-id: GOOGLE_PROJECT_ID
      - gcp-gcr/build-image:
          image: multi-cloud-demo
          tag: "latest,${CIRCLE_SHA1}"
          dockerfile: Dockerfile
          registry-url: gcr.io
          extra_build_args: |
            --build-arg DEPLOYMENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --build-arg APP_VERSION=${CIRCLE_SHA1:0:7}
      - gcp-gcr/push-image:
          image: multi-cloud-demo
          tag: "latest,${CIRCLE_SHA1}"
          registry-url: gcr.io

  deploy-to-aws:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - run:
          name: Replace placeholders in task definition
          command: |
            sed -i "s/{AWS_ACCOUNT_ID}/$AWS_ACCOUNT_ID/g" aws/task-definition.json
            sed -i "s/{ECR_REPOSITORY_URI}/$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\/multi-cloud-demo/g" aws/task-definition.json
            sed -i "s/{AWS_REGION}/$AWS_DEFAULT_REGION/g" aws/task-definition.json
      - aws-ecs/update_service:
          family: multi-cloud-demo
          cluster: multi-cloud-cluster
          service_name: multi-cloud-demo-service
          container_image_name_updates: "container=multi-cloud-demo,tag=${CIRCLE_SHA1}"

  deploy-to-gcp:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      - run:
          name: Replace placeholders in service definition
          command: |
            sed -i "s/{GCP_PROJECT_ID}/$GOOGLE_PROJECT_ID/g" gcp/service.yaml
            sed -i "s/{GCP_REGION}/$GOOGLE_COMPUTE_REGION/g" gcp/service.yaml
            sed -i "s/:latest/:${CIRCLE_SHA1}/g" gcp/service.yaml
      - gcp-cloud-run/deploy:
          platform: managed
          image: gcr.io/$GOOGLE_PROJECT_ID/multi-cloud-demo:${CIRCLE_SHA1}
          service-name: multi-cloud-demo
          region: $GOOGLE_COMPUTE_REGION
          unauthenticated: true

  verify-deployments:
    docker:
      - image: cimg/node:18.20
    steps:
      - run:
          name: Verify AWS deployment
          command: |
            echo "Verifying AWS ECS deployment..."
            # Add verification logic here
            echo "AWS deployment verification completed"
      - run:
          name: Verify GCP deployment
          command: |
            echo "Verifying GCP Cloud Run deployment..."
            # Add verification logic here
            echo "GCP deployment verification completed"

workflows:
  # Always run tests
  test-workflow:
    jobs:
      - test

  # AWS deployment workflow
  aws-deploy:
    when: << pipeline.parameters.deploy-aws >>
    jobs:
      - test
      - build-and-push-aws:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy-to-aws:
          requires:
            - build-and-push-aws

  # GCP deployment workflow
  gcp-deploy:
    when: << pipeline.parameters.deploy-gcp >>
    jobs:
      - test
      - build-and-push-gcp:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy-to-gcp:
          requires:
            - build-and-push-gcp

  # Verification workflow (only runs when both AWS and GCP are enabled)
  verification:
    when:
      and:
        - << pipeline.parameters.deploy-aws >>
        - << pipeline.parameters.deploy-gcp >>
    jobs:
      - test
      - build-and-push-aws:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy-to-aws:
          requires:
            - build-and-push-aws
      - build-and-push-gcp:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy-to-gcp:
          requires:
            - build-and-push-gcp
      - verify-deployments:
          requires:
            - deploy-to-aws
            - deploy-to-gcp
